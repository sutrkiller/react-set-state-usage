this.setState({obj: 123});
              ~~~~~~~~~~   [Use functional setState instead of passing an object.]
this.setState({obj: 123}, () => "callback");
              ~~~~~~~~~~   [Use functional setState instead of passing an object.]
                          ~~~~~~~~~~~~~~~~     [Do not use callback parameter "updater-only" switch]
this.setState((_) => ({obj: 123}), () => "callback");
                                   ~~~~~~~~~~~~~~~~     [Do not use callback parameter "updater-only" switch]
this.setState((prevState) => ({obj: prevState.obj}), () => "callback");
                                                     ~~~~~~~~~~~~~~~~    [Do not use callback parameter "updater-only" switch]
this.setState((prevState, props) => ({obj: prevState.obj, prop: props.obj}), () => "callback");
                                                                             ~~~~~~~~~~~~~~~~    [Do not use callback parameter "updater-only" switch]
this.setState((_, props) => ({prop: props.obj}), () => "callback");
                                                 ~~~~~~~~~~~~~~~~    [Do not use callback parameter "updater-only" switch]

this.setState((_) => ({obj: 123}));
this.setState((prevState) => ({obj: prevState.obj}));
this.setState((prevState, props) => ({obj: prevState.obj, prop: props.obj}));
this.setState((_, props) => ({prop: props.obj}));
